// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yVzW7bRhDHX4XY9tACgiTX7aG8tUUPvRRFAZ8CHxhpZdExufTuMoFhCNBHkDiIEQc5",
	"J0jyBrQsRoRtUa/wnzcKdiVLlkU7QWLr5IuwGs7O/Dgff+6zmggiEfJQK+buM1Vr8sCzxz9i3dxQXP7P",
	"d2OutDFFUkRcap9bBx54/o45NIQMPM3cqaXE9F7EmcuUln64xVolFnlKPRGyvuA9My5daJWY5LuxL3md",
	"uQ9mYWcXNmc3xMNtXtMmxRxXRSJUfJlXi0c8tIcbs03cilL8Jbmn+W3VpOFLpf/1Al6A9L0Vm8cufV31",
	"Lr/adfXzF2Hi2C8GWQr+t5TihrgBV8rb4sWduRLMmPywIayzr3fMM7xFjgH1cEaHDhL0qYuc2sgwRELP",
	"kCFzMMAZHTn0HAl1kbASe8yl8kXIXFYtV8trhlNEPPQin7lsvVwtr9ua6aZlrHixblp0MWl7naua9CM9",
	"CYHX1KMuUoyoi4yeIsPpJDcdORgjN2wYIkffAqSWxjxwbHscgzhGQm3r+opZGOmZ8P/Umcv+E0qbCWeT",
	"PnOl/xT1PQNSE6HmoWXyomjHr9lLlW0lwvlCm9OPkjeYy36ozDe+Ml33ytVdby0OlJYxt4ZJC21Ffqmu",
	"3UH66YzY/FdK/L6wiocO9aiDMVI6wAi5Qx3kGGKABCPT1F+r1VvjXBzkIsh3SB1DhzNkGGBEL43Bwlz8",
	"GSLB2DSaOkgmhL+vkPD6MuITUoc61KMXSKlDXfSph5S6BvK3lZbxDUZmoahtV+rI7EpOB8hwbPbK9Dil",
	"Nvr2Nyk5yHFsTnb5uhb+0MGpEYMBzpFhhMy80NQnpzb1rLqoOAg8uffNG/yTJTy5FN1e+NnooreljBTj",
	"Q5EH2zTpK7HiUt0gKx/ns4zMDM/IAuQ4Qf4FXUGGc/M6Rlky5+IjsKwqGxbhbmRl+YO5YmEp+KzdS8u9",
	"tKxYWpa2+E7kpNX6HAAA///Sf1+5zQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
